{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMb+Hjr876VtuA+IEk2v94b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pro5507/ABS-and-Polly/blob/main/Statistics%20II\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "v37NTNpPbWsv",
        "outputId": "66eac467-4d6a-4e48-b4d9-0f4b08ba3449"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a75dd634-a2f6-45e6-8946-827b3865f876\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a75dd634-a2f6-45e6-8946-827b3865f876\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Titanic Dataset.csv to Titanic Dataset.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "file = files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "data = pd.read_csv('Titanic Dataset.csv')"
      ],
      "metadata": {
        "id": "Qd63SrUIboXq"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(5)"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "pj6IxuJDcAUh",
        "outputId": "7b1ec38c-156f-4a2d-bdc8-74d853b97072"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name   Age  SibSp  Parch  \\\n",
              "0                            Braund, Mr. Owen Harris  22.0      1      0   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  38.0      1      0   \n",
              "2                             Heikkinen, Miss. Laina  26.0      0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  35.0      1      0   \n",
              "4                           Allen, Mr. William Henry  35.0      0      0   \n",
              "\n",
              "             Ticket     Fare Cabin Embarked  Gender  \n",
              "0         A/5 21171   7.2500   NaN        S    male  \n",
              "1          PC 17599  71.2833   C85        C  female  \n",
              "2  STON/O2. 3101282   7.9250   NaN        S  female  \n",
              "3            113803  53.1000  C123        S  female  \n",
              "4            373450   8.0500   NaN        S    male  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c966dc8e-316d-4781-9318-547403c8785c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c966dc8e-316d-4781-9318-547403c8785c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c966dc8e-316d-4781-9318-547403c8785c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c966dc8e-316d-4781-9318-547403c8785c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7b15b07d-3667-4247-8903-b83f61552046\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b15b07d-3667-4247-8903-b83f61552046')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7b15b07d-3667-4247-8903-b83f61552046 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 195,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56,\n        \"min\": 1,\n        \"max\": 195,\n        \"num_unique_values\": 195,\n        \"samples\": [\n          139,\n          17,\n          156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 195,\n        \"samples\": [\n          \"Osen, Mr. Olaf Elon\",\n          \"Rice, Master. Eugene\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.592438853382786,\n        \"min\": 0.83,\n        \"max\": 71.0,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          50.0,\n          44.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 176,\n        \"samples\": [\n          \"2649\",\n          \"370371\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.07874043247643,\n        \"min\": 0.0,\n        \"max\": 263.0,\n        \"num_unique_values\": 109,\n        \"samples\": [\n          6.975,\n          16.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"F2\",\n          \"C83\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "collapsed": true,
        "id": "0tdf4iMLcEv4",
        "outputId": "7a9c06a7-64f6-4499-d19c-b6132a1bbe71"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      int64\n",
              "Survived         int64\n",
              "Pclass           int64\n",
              "Name            object\n",
              "Age            float64\n",
              "SibSp            int64\n",
              "Parch            int64\n",
              "Ticket          object\n",
              "Fare           float64\n",
              "Cabin           object\n",
              "Embarked        object\n",
              "Gender          object\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cabin</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nominal_cat = ['Name', 'Ticket', 'Cabin']\n",
        "ordinal_cat = ['Embarked', 'Gender']"
      ],
      "metadata": {
        "id": "owXsk5mmcRYy"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Gender'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "collapsed": true,
        "id": "d5GNWIlncp-Y",
        "outputId": "c1cd4dce-fcd8-4e86-9baf-9211eb16339b"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Gender\n",
              "male      127\n",
              "female     68\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>127</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>68</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gender_categories = ['Male' ,'Female']"
      ],
      "metadata": {
        "id": "LTaZ9bevdgQL"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['Gender'] = pd.Categorical(data['Gender'], gender_categories, ordered= True)"
      ],
      "metadata": {
        "id": "D3t0MO3Bc3ki"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "median_index = np.median(data['Gender'].cat.codes)\n",
        "median_gender = gender_categories[int(median_index)]\n",
        "print(median_gender)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "sX4mEM5od-TB",
        "outputId": "caca7ce3-2283-42ca-c8af-648c754e7824"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Female\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Embarked'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "collapsed": true,
        "id": "p31tADnweeDi",
        "outputId": "dd2827f2-b200-4565-b478-b23bbf7029f0"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Embarked\n",
              "S    142\n",
              "C     36\n",
              "Q     17\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Q</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "embarked_categories = ['S', 'C', 'Q']\n",
        "data['Embarked'] = pd.Categorical(data['Embarked'], embarked_categories, ordered = True)"
      ],
      "metadata": {
        "id": "_DKvqADOeqtB"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Gender', hue='Survived', data=data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "collapsed": true,
        "id": "odB8xwsEfWkJ",
        "outputId": "e9c690c9-599f-40b5-b41a-1877bcdaaa01"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Gender', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAksAAAGwCAYAAAC5ACFFAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAALXpJREFUeJzt3XtcVXW+//H35iIguGFEZIOB9xLTNDQRZ8ZKKexikpfUOHmdOmNqGmZFmY7TxRqPo5WV1RxzmnT0WGZl5uhgmqOkiZfSlMwkTQW8BIjIRVi/P/q55+wjfkUENxtfz8djPWJ/1/e71ue7e9B+t9aXtW2WZVkCAABApbzcXQAAAEBdRlgCAAAwICwBAAAYEJYAAAAMCEsAAAAGhCUAAAADwhIAAICBj7sLqA8qKip05MgRNWrUSDabzd3lAACAKrAsS6dOnVJkZKS8vC58/YiwVAOOHDmiqKgod5cBAACq4dChQ7rmmmsuuJ+wVAMaNWok6Zc32263u7kaAABQFQUFBYqKinJ+jl8IYakGnLv1ZrfbCUsAAHiYiy2hYYE3AACAAWEJAADAgLAEAABgwJolAADqgfLycpWVlbm7jDrF19dX3t7el30cwhIAAB7MsixlZ2crLy/P3aXUSSEhIXI4HJf1HETCEgAAHuxcUGratKkaNmzIw5H/P8uyVFRUpNzcXElSREREtY9FWAIAwEOVl5c7g1JoaKi7y6lzAgICJEm5ublq2rRptW/JscAbAAAPdW6NUsOGDd1cSd117r25nPVchCUAADwct94urCbeG8ISAACAAWEJAADAgLAEAABq3Lp162Sz2Wr9kQYjRoxQUlJSrZ6DsAQAQD127NgxjRkzRtHR0fLz85PD4VBiYqI2btxYq+ft0aOHjh49quDg4Fo9z5XAowMAAKjHBgwYoNLSUv31r39Vq1atlJOTo7S0NJ04caJax7MsS+Xl5fLxMUeIBg0ayOFwVOscdQ1XlgAAqKfy8vK0YcMGvfTSS7r11lvVvHlzdevWTampqbrnnnuUlZUlm82mHTt2uIyx2Wxat26dpH/fTvvss8/UpUsX+fn5af78+bLZbNq7d6/L+WbPnq3WrVu7jMvLy1NBQYECAgL02WefufT/8MMP1ahRIxUVFUmSDh06pPvuu08hISFq3Lix+vXrp6ysLGf/8vJypaSkKCQkRKGhoXr88cdlWVbNv3H/B2EJAIB6KigoSEFBQVq+fLlKSkou61hPPvmkXnzxRe3Zs0cDBw5U165dtXDhQpc+Cxcu1P3333/eWLvdrrvvvluLFi06r39SUpIaNmyosrIyJSYmqlGjRtqwYYM2btyooKAg9enTR6WlpZKkWbNmacGCBZo/f77+9a9/6eTJk/rwww8va15VQVgCAKCe8vHx0YIFC/TXv/5VISEh+vWvf62nnnpKX3/99SUf649//KNuu+02tW7dWo0bN1ZycrL+/ve/O/d/9913ysjIUHJycqXjk5OTtXz5cudVpIKCAn366afO/kuWLFFFRYX+8pe/qGPHjoqJidE777yjgwcPOq9yzZkzR6mpqerfv79iYmI0b968K7ImirAEAEA9NmDAAB05ckQff/yx+vTpo3Xr1ik2NlYLFiy4pON07drV5fWQIUOUlZWlL7/8UtIvV4liY2PVrl27Ssffeeed8vX11ccffyxJ+uCDD2S325WQkCBJ2rlzp77//ns1atTIeUWscePGKi4u1v79+5Wfn6+jR48qLi7OeUwfH5/z6qoNhCUAAOo5f39/3XbbbXrmmWe0adMmjRgxQtOmTZOX1y8x4H+v+7nQ14IEBga6vHY4HOrVq5fz1tqiRYsueFVJ+mXB98CBA136Dx482LlQvLCwUF26dNGOHTtctu+++67SW3tXEmEJAICrTPv27XX69GmFhYVJko4ePerc978Xe19McnKylixZovT0dP3www8aMmTIRfuvWrVKu3fv1tq1a13CVWxsrPbt26emTZuqTZs2LltwcLCCg4MVERGhzZs3O8ecPXtWGRkZVa63ughLAADUUydOnFCvXr303nvv6euvv9aBAwe0dOlS/elPf1K/fv0UEBCg7t27Oxdur1+/XlOmTKny8fv3769Tp05pzJgxuvXWWxUZGWns37NnTzkcDiUnJ6tly5Yut9SSk5PVpEkT9evXTxs2bNCBAwe0bt06PfLII/rpp58kSRMmTNCLL76o5cuXa+/evXr44Ydr/aGXEmEJAIB6KygoSHFxcZo9e7Z69uypDh066JlnntGDDz6ouXPnSpLmz5+vs2fPqkuXLpo4caKee+65Kh+/UaNG6tu3r3bu3Gm8BXeOzWbT0KFDK+3fsGFDffHFF4qOjnYu4B49erSKi4tlt9slSZMmTdIDDzyg4cOHKz4+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NGfOHHeXgVpCWMJVacSIEbLZbPr9739/3r6xY8fKZrNpxIgRV74wABd17vf3/27ff/+9u0tDPUVYwlUrKipKixcv1pkzZ5xtxcXFWrRokaKjo91YGYCL6dOnj44ePeqytWzZ0t1loZ4iLOGqFRsbq6ioKC1btszZtmzZMkVHR+vGG290tq1atUq/+c1vFBISotDQUN19993av3+/8di7du3SHXfcoaCgIIWHh+uBBx7Q8ePHa20uwNXGz89PDofDZfP29tZHH32k2NhY+fv7q1WrVpo+fbrOnj3rHGez2fTmm2/q7rvvVsOGDRUTE6P09HR9//33uuWWWxQYGKgePXq4/I7v379f/fr1U3h4uIKCgnTTTTfpn//8p7G+vLw8/e53v1NYWJjsdrt69eqlnTt31tr7gdpFWMJVbdSoUXrnnXecr+fPn6+RI0e69Dl9+rRSUlK0detWpaWlycvLS/fee68qKioqPWZeXp569eqlG2+8UVu3btWqVauUk5Oj++67r1bnAlztNmzYoGHDhmnChAn69ttv9eabb2rBggV6/vnnXfo9++yzGjZsmHbs2KF27drp/vvv13/+538qNTVVW7dulWVZGjdunLN/YWGh7rzzTqWlpWn79u3q06eP+vbtq4MHD16wlkGDBik3N1efffaZMjIyFBsbq969e+vkyZO1Nn/UIgu4Cg0fPtzq16+flZuba/n5+VlZWVlWVlaW5e/vbx07dszq16+fNXz48ErHHjt2zJJkffPNN5ZlWdaBAwcsSdb27dsty7KsZ5991rr99ttdxhw6dMiSZGVmZtbmtICrwvDhwy1vb28rMDDQuQ0cONDq3bu39cILL7j0/dvf/mZFREQ4X0uypkyZ4nydnp5uSbL++7//29n297//3fL39zfWcP3111uvvvqq83Xz5s2t2bNnW5ZlWRs2bLDsdrtVXFzsMqZ169bWm2++ecnzhfv5uDWpAW4WFhamu+66SwsWLJBlWbrrrrvUpEkTlz779u3T1KlTtXnzZh0/ftx5RengwYPq0KHDecfcuXOnPv/8cwUFBZ23b//+/br22mtrZzLAVeTWW2/VG2+84XwdGBioG264QRs3bnS5klReXq7i4mIVFRWpYcOGkqQbbrjBuT88PFyS1LFjR5e24uJiFRQUyG63q7CwUH/4wx/06aef6ujRozp79qzOnDlz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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='Embarked', hue='Survived', data=data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "collapsed": true,
        "id": "-GCt_5QAf9ma",
        "outputId": "a04d84dc-8b94-4fdb-a84a-129839073b7f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Embarked', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "data = scaler.fit_transform(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "3rgicRI6gMTy",
        "outputId": "015ddd90-6be2-4749-f0aa-9102ccc88c24"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: 'Braund, Mr. Owen Harris'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-f1e5f277a72d>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mscaler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/_set_output.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    317\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 319\u001b[0;31m         \u001b[0mdata_to_wrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    320\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_to_wrap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m             \u001b[0;31m# only wrap the first output for cross decomposition\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    916\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m             \u001b[0;31m# fit method of arity 1 (unsupervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 918\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    919\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    920\u001b[0m             \u001b[0;31m# fit method of arity 2 (supervised transformation)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    892\u001b[0m         \u001b[0;31m# Reset internal state before fitting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    893\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 894\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartial_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    895\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    896\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0m_fit_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprefer_skip_nested_validation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mpartial_fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    928\u001b[0m         \"\"\"\n\u001b[1;32m    929\u001b[0m         \u001b[0mfirst_call\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"n_samples_seen_\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 930\u001b[0;31m         X = validate_data(\n\u001b[0m\u001b[1;32m    931\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mvalidate_data\u001b[0;34m(_estimator, X, y, reset, validate_separately, skip_check_array, **check_params)\u001b[0m\n\u001b[1;32m   2942\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2943\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2944\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"X\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2945\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2946\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_all_finite, ensure_non_negative, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m   1053\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1054\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1055\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1056\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1057\u001b[0m                 raise ValueError(\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/_array_api.py\u001b[0m in \u001b[0;36m_asarray_with_order\u001b[0;34m(array, dtype, order, copy, xp, device)\u001b[0m\n\u001b[1;32m    837\u001b[0m             \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    838\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 839\u001b[0;31m             \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    841\u001b[0m         \u001b[0;31m# At this point array is a NumPy ndarray. We convert it to an array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype, copy)\u001b[0m\n\u001b[1;32m   2151\u001b[0m     ) -> np.ndarray:\n\u001b[1;32m   2152\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2153\u001b[0;31m         \u001b[0marr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2154\u001b[0m         if (\n\u001b[1;32m   2155\u001b[0m             \u001b[0mastype_is_view\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Braund, Mr. Owen Harris'"
          ]
        }
      ]
    }
  ]
}