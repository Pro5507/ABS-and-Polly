{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOxjBSRv++oNF3GLAQq+uiX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Pro5507/ABS-and-Polly/blob/main/Quartile%2C%20Interquartile%20%26%20Qunatile\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "COO0gA4u8VDq",
        "outputId": "1520ab82-e4a2-440c-8c6e-ca99688d2807"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5498897b-7a26-491a-9390-9d2aa9a30494\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5498897b-7a26-491a-9390-9d2aa9a30494\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Titanic Dataset.csv to Titanic Dataset.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "file= files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "tOb6Dyh78gL2"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data= pd.read_csv('Titanic Dataset.csv')"
      ],
      "metadata": {
        "id": "3H1R-jXL8zG1"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head(5)"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "vi4F494v88JE",
        "outputId": "0319fdf6-7f80-4d24-ccd9-31dc312526dc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name   Age  SibSp  Parch  \\\n",
              "0                            Braund, Mr. Owen Harris  22.0      1      0   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  38.0      1      0   \n",
              "2                             Heikkinen, Miss. Laina  26.0      0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  35.0      1      0   \n",
              "4                           Allen, Mr. William Henry  35.0      0      0   \n",
              "\n",
              "             Ticket     Fare Cabin Embarked  Gender  \n",
              "0         A/5 21171   7.2500   NaN        S    male  \n",
              "1          PC 17599  71.2833   C85        C  female  \n",
              "2  STON/O2. 3101282   7.9250   NaN        S  female  \n",
              "3            113803  53.1000  C123        S  female  \n",
              "4            373450   8.0500   NaN        S    male  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8cb8fc7e-b69d-4513-9968-7f056bbbdce8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cb8fc7e-b69d-4513-9968-7f056bbbdce8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8cb8fc7e-b69d-4513-9968-7f056bbbdce8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8cb8fc7e-b69d-4513-9968-7f056bbbdce8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-33e234b4-0775-4597-9966-6de35cd7f290\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33e234b4-0775-4597-9966-6de35cd7f290')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-33e234b4-0775-4597-9966-6de35cd7f290 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 195,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56,\n        \"min\": 1,\n        \"max\": 195,\n        \"num_unique_values\": 195,\n        \"samples\": [\n          139,\n          17,\n          156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 195,\n        \"samples\": [\n          \"Osen, Mr. Olaf Elon\",\n          \"Rice, Master. Eugene\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.592438853382786,\n        \"min\": 0.83,\n        \"max\": 71.0,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          50.0,\n          44.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 176,\n        \"samples\": [\n          \"2649\",\n          \"370371\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.07874043247643,\n        \"min\": 0.0,\n        \"max\": 263.0,\n        \"num_unique_values\": 109,\n        \"samples\": [\n          6.975,\n          16.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"F2\",\n          \"C83\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "mSAA1rBw8_-M",
        "outputId": "8bf56f39-dd3b-49f3-8dce-0ccd4b35ed54"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Age              0\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          156\n",
              "Embarked         0\n",
              "Gender           0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PassengerId</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Survived</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pclass</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SibSp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Parch</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ticket</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fare</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cabin</th>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Embarked</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age_q1 = np.quantile(data['Age'], 0.25)\n",
        "age_q2 = np.quantile(data['Age'], 0.50)\n",
        "age_q3 = np.quantile(data['Age'], 0.75)"
      ],
      "metadata": {
        "id": "kSnp0ieh9Hus"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Q1 :\", age_q1)\n",
        "print(\"Q2 :\", age_q2)\n",
        "print(\"Q3 :\", age_q3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "-fU0hMWt9q-m",
        "outputId": "a4244787-e697-4cd9-9a3c-f80ea49d04fc"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Q1 : 20.0\n",
            "Q2 : 27.76173076923077\n",
            "Q3 : 33.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IQR_age = age_q3 - age_q1\n",
        "print(\"Interquartile Range :\", IQR_age)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f6JafJsY9-vk",
        "outputId": "9aa4c0ee-027f-4c59-f313-fbef869ff807"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Interquartile Range : 13.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(data['Age'])\n",
        "plt.ylabel(\"Count of Passengers\")\n",
        "plt.xlabel(\"Age\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "collapsed": true,
        "id": "Dp9wDglK-Ulk",
        "outputId": "1f2cb03e-9b5b-4ccc-c157-4a27877d7500"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Age')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fare_q1= np.quantile(data['Fare'], 0.25)\n",
        "fare_q2= np.quantile(data['Fare'], 0.50)\n",
        "fare_q3= np.quantile(data['Fare'], 0.75)"
      ],
      "metadata": {
        "id": "_dr56y5X-yJc"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.boxplot(data['Age'])\n",
        "plt.title('Age Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "collapsed": true,
        "id": "PB7yyrFN_Qb9",
        "outputId": "071f6e2a-06b1-42d2-8acf-d8a7603be958"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAh8AAAGzCAYAAACPa3XZAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAALjFJREFUeJzt3Xl0VdXd//HPzRzJgCAZkEAiEYNNVIxIBlIJRikP8JgmqFUpaKlWDFQGbRv6iJVlSR0Qag2gLhraBTwoEFJNBasIiBB8IK0ugoCJTQwaEpwyECGhuef3hz9ueyWoN8ndN8P7tdZZ9e697z7fuFbNJ/vsc47NsixLAAAAhnh5ugAAANC3ED4AAIBRhA8AAGAU4QMAABhF+AAAAEYRPgAAgFGEDwAAYBThAwAAGEX4AAAARhE+ALikqqpKNptNa9ascfu51qxZI5vNpqqqKkdbdHS0Jk+e7PZzS9LOnTtls9m0c+dOI+cD+grCB+ABK1askM1m05gxYzxdimw2m+Pw8fHRgAEDlJiYqPvvv1/vvfdel51nxYoVRgJLR3Tn2oDeyMa7XQDzUlNTVVNTo6qqKpWXlys2NtZjtdhsNt1www2aPn26LMtSQ0OD3n33XW3cuFHNzc167LHHNH/+fMd4y7LU0tIiX19feXt7f+fzxMfH66KLLnJpFaGtrU1nzpyRv7+/bDabpK9WPuLj41VcXPyd5+lobXa7Xa2trfLz85OXF3+rAV2F/zcBhlVWVmrv3r166qmnNGjQIK1bt87TJWnEiBGaNm2afvzjH2v27Nl6/vnn9cEHH2j06NFasGCBXnnlFcdYm82mgIAAl4KHq5qbmyVJ3t7eCggIcAQP07y8vBQQEEDwALoY/48CDFu3bp0uvPBCTZo0SVOnTj1v+Pjss8/04x//WCEhIerfv79mzJihd999t939FkeOHNHUqVM1YMAABQQE6JprrtFLL73UqToHDhyoDRs2yMfHR7/97W8d7e3t+aitrdVdd92lIUOGyN/fX5GRkbrpppscezWio6N16NAh7dq1y3GJZ9y4cZL+va9j165duu+++xQWFqYhQ4Y49f3nno+z/va3v+mqq65SQECALr/8chUWFjr1/+Y3v2k3tHx9zm+q7Xx7PjZu3KjExEQFBgbqoosu0rRp0/Txxx87jbnzzjsVFBSkjz/+WJmZmQoKCtKgQYP0wAMPqK2t7Vv+7QO9m4+nCwD6mnXr1ikrK0t+fn667bbbtHLlSu3fv1+jR492jLHb7ZoyZYr+7//+T7NmzVJcXJz+8pe/aMaMGefMd+jQIaWmpuriiy/Wr371K/Xr108vvviiMjMztXnzZv3whz/scK1Dhw7Vddddpx07dqixsVEhISHtjsvOztahQ4c0Z84cRUdH68SJE3rttddUXV2t6OhoLV++XHPmzFFQUJB+/etfS5LCw8Od5rjvvvs0aNAgLVq0yLHycT7l5eW69dZbde+992rGjBkqKCjQzTffrG3btumGG25w6Wf8LrX9pzVr1uiuu+7S6NGjlZeXp7q6Ov3+97/Xnj179I9//EP9+/d3jG1ra9OECRM0ZswYPfnkk3r99de1dOlSDR8+XLNmzXKpTqBXsQAYc+DAAUuS9dprr1mWZVl2u90aMmSIdf/99zuN27x5syXJWr58uaOtra3NGj9+vCXJKigocLRff/31VkJCgnX69GlHm91ut1JSUqxLL730W2uSZOXk5Jy3//7777ckWe+++65lWZZVWVnpVMMXX3xhSbKeeOKJbzzP9773Peu66647p72goMCSZI0dO9b617/+1W5fZWWlo23YsGGWJGvz5s2OtoaGBisyMtIaNWqUo+3hhx+22vtPXHtznq+2HTt2WJKsHTt2WJZlWa2trVZYWJgVHx9vnTp1yjGuuLjYkmQtWrTI0TZjxgxLkrV48WKnOUeNGmUlJiaecy6gL+GyC2DQunXrFB4ervT0dElf7Z+49dZbtWHDBqel+G3btsnX11d33323o83Ly0s5OTlO833++ed64403dMstt6ipqUmffvqpPv30U3322WeaMGGCysvLz7kc4KqgoCBJUlNTU7v9gYGB8vPz086dO/XFF190+Dx33333d95HMnjwYKcVnZCQEE2fPl3/+Mc/VFtb2+Eavs2BAwd04sQJ3XfffQoICHC0T5o0SXFxcfrrX/96znfuvfdep89paWn65z//6bYagZ6A8AEY0tbWpg0bNig9PV2VlZWqqKhQRUWFxowZo7q6Om3fvt0x9sMPP1RkZKQuuOACpzm+fldMRUWFLMvSQw89pEGDBjkdDz/8sCTpxIkTnar75MmTkqTg4OB2+/39/fXYY49p69atCg8P1/e//309/vjjLoeAmJiY7zw2Njb2nP0cI0aM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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.boxplot(data['Pclass'])\n",
        "plt.title('Passenger Class Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "collapsed": true,
        "id": "VSvOC1fH_n1d",
        "outputId": "8c2ada22-dbb0-40c9-a99b-9604ad1aec8c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}